import json
import datetime
from datetime import datetime
import boto3
import PIL.Image as Image
from pathlib import Path


aws_access_key_id = '' 
aws_secret_access_key = '' 
region_name = ''

# Initialize S3 resource with credentials
s3 = boto3.resource('s3',
                    aws_access_key_id=aws_access_key_id,
                    aws_secret_access_key=aws_secret_access_key,
                    region_name=region_name)

# S3 location for images
s3_bucket = 'your_S3_bucket_name'  # use the S3 bucket name
s3_key_path_manifest_file = 'manifest/'
s3_key_path_images = 'images/'
s3_path = f's3://{s3_bucket}/{s3_key_path_images}'

# Local file information
local_path = Path("/local/path")
coco_manifest = 'deepfashion2.json'
coco_json_file = local_path.joinpath(coco_manifest)  # Fixed the path joining
job_name = 'deepfashion2'
cl_manifest_file = 'custom_labels.manifest'

# Ensure the CL manifest file exists before writing
open(local_path.joinpath(cl_manifest_file), 'w').close()  # Fixed the path joining

# Class representing a Custom Label JSON line for an image
class cl_json_line:
    def __init__(self, job, img):
        # Get image info. Annotations are dealt with separately
        sizes = []
        image_size = {}
        image_size["width"] = img["width"]
        image_size["depth"] = 3
        image_size["height"] = img["height"]
        sizes.append(image_size)

        bounding_box = {}
        bounding_box["annotations"] = []
        bounding_box["image_size"] = sizes

        self.__dict__["source-ref"] = s3_path + img['file_name']
        self.__dict__[job] = bounding_box

        # Get metadata
        metadata = {}
        metadata['job-name'] = job_name
        metadata['class-map'] = {}
        metadata['human-annotated'] = 'yes'
        metadata['objects'] = []
        metadata['creation-date'] = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
        metadata['type'] = 'groundtruth/object-detection'

        self.__dict__[job + '-metadata'] = metadata

print("Getting image, annotations, and categories from COCO file...")

with open(coco_json_file) as f:
    # Get custom label compatible info
    js = json.load(f)
    images = js['images']
    categories = js['categories']
    annotations = js['annotations']

    print(f'Images: {len(images)}')
    print(f'Annotations: {len(annotations)}')
    print(f'Categories: {len(categories)}')

label_attribute = 'bounding-box' 

print("Creating CL JSON lines...")

images_dict = {image['id']: cl_json_line(label_attribute, image) for image in images}

print('Parsing annotations...')
for annotation in annotations:
    image = images_dict[annotation['image_id']]

    cl_annotation = {}
    cl_class_map = {}

    # Get bounding box information
    cl_bounding_box = {}
    cl_bounding_box['left'] = annotation['bbox'][0]
    cl_bounding_box['top'] = annotation['bbox'][1]
    cl_bounding_box['width'] = annotation['bbox'][2]
    cl_bounding_box['height'] = annotation['bbox'][3]
    cl_bounding_box['class_id'] = annotation['category_id']

    getattr(image, label_attribute)['annotations'].append(cl_bounding_box)

    for category in categories:
        if annotation['category_id'] == category['id']:
            getattr(image, label_attribute + '-metadata')['class-map'][category['id']] = category['name']

    cl_object = {}
    cl_object['confidence'] = int(1)  # not currently used by Custom Labels
    getattr(image, label_attribute + '-metadata')['objects'].append(cl_object)

print('Done parsing annotations')

# Create manifest file.
print('Writing Custom Labels manifest...')

for im in images_dict.values():
    with open(local_path.joinpath(cl_manifest_file), 'a+') as outfile:  # Fixed the path joining
        json.dump(im.__dict__, outfile)
        outfile.write('\n')

# Upload manifest file to S3 bucket.
print('Uploading Custom Labels manifest file to S3 bucket')
print(f'Uploading {str(local_path.joinpath(cl_manifest_file))} to {s3_key_path_manifest_file}')
print(s3_bucket)

s3.Bucket(s3_bucket).upload_file(str(local_path.joinpath(cl_manifest_file)), s3_key_path_manifest_file + cl_manifest_file)

# Print S3 URL to manifest file.
print('S3 URL Path to manifest file.')
print(f'\033[1m s3://{s3_bucket}/{s3_key_path_manifest_file}{cl_manifest_file} \033[0m')
